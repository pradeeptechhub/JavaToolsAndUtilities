
https://javainterviewsquestions.wordpress.com/category/senior-java-developer-interviews/page/2/

8. What happens when I make a static method as synchronized?
Synchronized static methods have a lock on the class “Class”, so when a thread enters a synchronized static method, 
the class itself gets locked by the thread monitor and no other thread can enter any static synchronized methods on that class. 
*****This is unlike instance methods, as multiple threads can access “same synchronized instance methods” at same time for different instances.

9. Can a thread call a non-synchronized instance method of an Object when a synchronized method is being executed ?
Yes, a Non synchronized method can always be called without any problem. In fact Java does not do any check for a non-synchronized method. 
The Lock object check is performed only for synchronized methods/blocks.
In case the method is not declared synchronized Java will call even if you are playing with shared data. 
So you have to be careful while doing such thing. The decision of declaring a method as synchronized has to be based on critical section access. 
If your method does not access a critical section (shared resource or data structure) it need not be declared synchronized.
Below is the example which demonstrates this, The Common class has two methods
synchronizedMethod1() and method1()
MyThread class is calling both the methods in separate threads,

1.  public class Common {
2.   
	3.  public synchronized void synchronizedMethod1() {
		4.  System.out.println(“synchronizedMethod1 called”);
		5.  try {
		6.  	Thread.sleep(1000);
		7.  } catch (InterruptedException e) {
		8.  	e.printStackTrace();
		9.  }
		10. System.out.println(“synchronizedMethod1 done”);
	11. }
	12. public void method1() {
		13. System.out.println(“Method 1 called”);
		14. try {
		15. 	Thread.sleep(1000);
		16. } catch (InterruptedException e) {
		17. 	e.printStackTrace();
		18. }
		19. System.out.println(“Method 1 done”);
	20. }
21. }

1.  public class MyThread extends Thread {
	2.  private int id = 0;
	3.  private Common common;
	4.   
	5.  public MyThread(String name, int no, Common object) {
		6.  super(name);
		7.  common = object;
		8.  id = no;
	9.  }
	10.  
	11. public void run() {
		12. System.out.println(“Running Thread” + this.getName());
		13. try {
			14. if (id == 0) {
			15. common.synchronizedMethod1();
			16. } else {
			17. common.method1();
			18. }
		19. } catch (Exception e) {
		20. 	e.printStackTrace();
		21. }
	22. }
	23.  
	24. public static void main(String[] args) {
		25. Common c = new Common();
		26. MyThread t1 = new MyThread(“MyThread-1”, 0, c);
		27. MyThread t2 = new MyThread(“MyThread-2”, 1, c);
		28. t1.start();
		29. t2.start();
	30. }
31. }

OutPut–>
1.  Running ThreadMyThread-1
2.  synchronizedMethod1 called
3.  Running ThreadMyThread-2
4.  Method 1 called
5.  synchronizedMethod1 done
6.  Method 1 done
This shows that method1() – is called even though the synchronizedMethod1() was in execution.

10. Can two threads call two different synchronized instance methods of an Object?
No. If a object has synchronized instance methods then the Object itself is used a lock object for controlling the synchronization. 
Therefore all other instance methods need to wait until previous method call is completed.
See the below sample code which demonstrate it very clearly. The Class Common has 2 methods called synchronizedMethod1() 
and synchronizedMethod2() MyThread class is calling both the methods.
1.  public class Common {
2.  public synchronized void synchronizedMethod1() {
3.     System.out.println(“synchronizedMethod1 called”);
4.     try {
5.        Thread.sleep(1000);
6.        } catch (InterruptedException e) {
7.            e.printStackTrace();
8.        }
9.        System.out.println(“synchronizedMethod1 done”);
10. }
11.  
12. public synchronized void synchronizedMethod2() {
13.     System.out.println(“synchronizedMethod2 called”);
14.     try {
15.         Thread.sleep(1000);
16.          } catch (InterruptedException e) {
17.             e.printStackTrace();
18.         }
19.       System.out.println(“synchronizedMethod2 done”);
20.    }
21. } 